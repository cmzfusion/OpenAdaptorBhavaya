/* Copyright (C) 2000-2003 The Software Conservancy as Trustee.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Nothing in this notice shall be deemed to grant any rights to trademarks,
 * copyrights, patents, trade secrets or any other intellectual property of the
 * licensor or any contributor except as expressly stated herein. No patent
 * license is granted separate from the Software, for code that you delete from
 * the Software, or for combinations of the Software with other software or
 * hardware.
 */

package org.bhavaya.util;

import java.beans.PropertyChangeListener;

/**
 * Description.
 *
 * @author Daniel Van Enckevort
 * @version $Revision: 1.7 $
 */
public class DefaultObservable implements Observable {
    private transient BeanPropertyChangeSupport propertyChangeSupport;

    public DefaultObservable() {
        propertyChangeSupport = new BeanPropertyChangeSupport(this);
    }

    protected Object clone() {
        DefaultObservable clone = null;
        try {
            clone = (DefaultObservable) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException("Error cloning bean", e);
        }

        clone.propertyChangeSupport = new BeanPropertyChangeSupport(clone);

        return clone;
    }

    public void addPropertyChangeListener(PropertyChangeListener propertyChangeListener) {
        propertyChangeSupport.addPropertyChangeListener(propertyChangeListener);
    }

    public void addPropertyChangeListener(String propertyName, PropertyChangeListener propertyChangeListener) {
        propertyChangeSupport.addPropertyChangeListener(propertyName, propertyChangeListener);
    }

    public void removePropertyChangeListener(PropertyChangeListener propertyChangeListener) {
        propertyChangeSupport.removePropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(String propertyName, PropertyChangeListener propertyChangeListener) {
        propertyChangeSupport.removePropertyChangeListener(propertyName, propertyChangeListener);
    }

    public PropertyChangeListener[] getPropertyChangeListeners() {
        return propertyChangeSupport.getPropertyChangeListeners();
    }

    public PropertyChangeListener[] getPropertyChangeListeners(String propertyName) {
        return propertyChangeSupport.getPropertyChangeListeners(propertyName);
    }

    protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, int oldValue, int newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, double oldValue, double newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    // Autogenerated classes cannot perform the necessary type widening to use,
    // for example, the firePropertyChange(String, double, double) method when
    // provided with arguments of type long. Normally the compiler does this
    // on a method by method basis. Instead of implementing this functionality
    // in the generator we will just state all fire methods for
    // primitives explicity.
    protected void firePropertyChange(String propertyName, long oldValue, long newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, short oldValue, short newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, char oldValue, char newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, byte oldValue, byte newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected void firePropertyChange(String propertyName, float oldValue, float newValue) {
        if (!propertyChangeSupport.isObserved(propertyName)) return; // do this check, even though there is code to do this later to avoid object creation (converting primitive to object)
        propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
    }

    protected BeanPropertyChangeSupport getPropertyChangeSupport() {
        return propertyChangeSupport;
    }
}
