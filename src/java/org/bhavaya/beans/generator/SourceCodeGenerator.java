/* Copyright (C) 2000-2003 The Software Conservancy as Trustee.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Nothing in this notice shall be deemed to grant any rights to trademarks,
 * copyrights, patents, trade secrets or any other intellectual property of the
 * licensor or any contributor except as expressly stated herein. No patent
 * license is granted separate from the Software, for code that you delete from
 * the Software, or for combinations of the Software with other software or
 * hardware.
 */

package org.bhavaya.beans.generator;

import org.bhavaya.beans.ForeignKeyProperty;
import org.bhavaya.beans.Property;
import org.bhavaya.beans.Schema;
import org.bhavaya.util.ClassUtilities;
import org.bhavaya.util.Log;
import org.bhavaya.util.Utilities;

import java.io.File;
import java.io.IOException;
import java.util.Date;

/**
 * Description.
 *
 * @author Parwinder Sekhon
 * @version $Revision: 1.8 $
 */
public class SourceCodeGenerator extends CodeGenerator {
    private static final Log log = Log.getCategory(SourceCodeGenerator.class);
    private static final String INDENT = "    ";
    private String rootDirectory;
    private StringBuffer sourceCode;

    public SourceCodeGenerator(String rootDirectory) {
        super();
        if (rootDirectory == null) throw new IllegalArgumentException("rootDirectory is null");
        Schema.setGenerationMode(true);
        this.rootDirectory = rootDirectory;
    }

    protected void startGenerateClass(String classToGenerate) {
        sourceCode = new StringBuffer(5000);
    }

    protected void endGenerateClass(String classToGenerate) {
        sourceCode.append("}").append('\n');

        try {
            String fileName = rootDirectory + File.separator + classToGenerate.replace('.', File.separatorChar) + ".java";
            log.info("Writing " + classToGenerate + " to " + fileName);
            writeStringToFile(fileName, sourceCode.toString());
        } catch (IOException e) {
            log.error(e);
        }
    }

    protected void appendHeader(String classToGenerate, String superClassOfGeneratedBean, String superClassOfBean, Class[] interfacesToImplement) {
        String packageForGeneratedClass = ClassUtilities.getPackageName(classToGenerate);

        sourceCode.append("package ").append(packageForGeneratedClass).append(';').append('\n');
        sourceCode.append('\n');

        // Javadoc Header
        sourceCode.append("/**").append('\n');
        sourceCode.append(" * Generated by ").append(this.getClass().getName()).append(" on ").append(new Date()).append('\n');
        sourceCode.append(" *").append('\n');
        sourceCode.append(" * @author Bhavaya").append('\n');
        sourceCode.append(" * @version $Revision: 1.8 $").append('\n');
        sourceCode.append(" */").append('\n');

        // Class declaration
        String unqualifiedClassName = ClassUtilities.getUnqualifiedClassName(classToGenerate);
        sourceCode.append("public class ").append(unqualifiedClassName).append(" extends ").append(superClassOfGeneratedBean);

        if (interfacesToImplement.length > 0) {
            sourceCode.append(" implements ");
            for (int i = 0; i < interfacesToImplement.length; i++) {
                if (i > 0) sourceCode.append(", ");
                sourceCode.append(interfacesToImplement[i].getName());
            }
        }

        sourceCode.append(" {").append('\n');
        sourceCode.append('\n');

        if (Utilities.contains(interfacesToImplement, org.bhavaya.beans.Lazy.class)) appendLazy(unqualifiedClassName);
        if (Utilities.contains(interfacesToImplement, org.bhavaya.beans.Indexable.class)) appendIndexable();
    }

    private void appendLazy(String unqualifiedClassName) {
        sourceCode.append(INDENT).append("private org.bhavaya.util.LoadClosure load;").append('\n');
        sourceCode.append(INDENT).append("private static " + unqualifiedClassName + " lazyNullInstance;").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public Object load() {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("return load.load();").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public void setLoad(org.bhavaya.util.LoadClosure load) {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("this.load = load;").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public boolean isLazy() {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("return load != null;").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public boolean isLazyNullInstance() {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("return this == lazyNullInstance;").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public boolean setThisInstanceAsLazyNull() {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("if ( lazyNullInstance != null ) {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append(INDENT).append("throw new UnsupportedOperationException(\"Lazy null instance has already been assigned\");").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("}").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("lazyNullInstance = this").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');
    }

    private void appendIndexable() {
        sourceCode.append(INDENT).append("private java.util.Map indexedValues;").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public void addIndexedValue(Object index, Object object) {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("if (indexedValues == null) indexedValues = new java.util.HashMap();").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("indexedValues.put(index, object);").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');

        sourceCode.append(INDENT).append("public Object getIndexedValue(Object index) {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("if (indexedValues == null) return null;").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("return indexedValues.get(index);").append('\n');
        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');

    }

    protected void appendConstructor(String classToGenerate, Class[] constructorParameters) {
        String unqualifiedClassName = ClassUtilities.getUnqualifiedClassName(classToGenerate);

        sourceCode.append(INDENT).append("public ").append(unqualifiedClassName).append("(");

        for (int j = 0; j < constructorParameters.length; j++) {
            Class constructorParameter = constructorParameters[j];
            if (j != 0) sourceCode.append(", ");
            sourceCode.append(constructorParameter.getName());
            sourceCode.append(" p").append(j);
        }

        sourceCode.append(")").append(" {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("super(");

        for (int j = 0; j < constructorParameters.length; j++) {
            if (j != 0) sourceCode.append(", ");
            sourceCode.append("p").append(j);
        }
        sourceCode.append(");").append('\n');

        sourceCode.append(INDENT).append("}").append('\n');
        sourceCode.append('\n');
    }

    protected void appendToString(String toStringCode) {
        sourceCode.append(INDENT).append("public String toString() {").append('\n');
        sourceCode.append(INDENT).append(INDENT).append(toStringCode).append('\n');
        sourceCode.append(INDENT).append("}").append('\n').append('\n');
    }

    protected void appendField(String propertyName, String propertyType) {
        sourceCode.append(INDENT).append("private ").append(propertyType).append(' ').append(propertyName).append(";").append('\n').append('\n');
    }

    protected void appendGetter(String propertyName, String propertyType, boolean lazy) {
        String getMethodName = getGetMethodName(propertyType, propertyName, true);
        String setMethodName = getSetMethodName(propertyName);

        sourceCode.append(INDENT).append("public ").append(propertyType).append(" ").append(getMethodName).append(" ").append("{").append('\n');

        if (lazy) {
            sourceCode.append(INDENT).append(INDENT).append("if (org.bhavaya.beans.BeanFactory.isLazy(").append(propertyName).append(")) {").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append(setMethodName).append("(").append("(").append(propertyType).append(")((org.bhavaya.util.LoadClosure)").append(propertyName).append(").load());").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("}").append('\n');

            sourceCode.append(INDENT).append(INDENT).append("if (org.bhavaya.beans.BeanFactory.isLazyNull(").append(propertyName).append(")) {").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append("return null;").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("}").append('\n');
        }


        sourceCode.append(INDENT).append(INDENT).append("return ").append(propertyName).append(';').append('\n');
        sourceCode.append(INDENT).append("}").append('\n').append('\n');
    }

    protected void appendCollectionGetter(String propertyName, String componentPropertyType, boolean lazy, String foreignIndex) {
        Class propertyType = org.bhavaya.collection.BeanCollection.class;
        String getMethodName = getGetMethodName(propertyType.getName(), propertyName, true);
        String setMethodName = getSetMethodName(propertyName);

        sourceCode.append(INDENT).append("public ").append(propertyType.getName()).append(" ").append(getMethodName).append(" ").append("{").append('\n');

        if (lazy) {
            sourceCode.append(INDENT).append(INDENT).append("if (").append(propertyName).append(" == null) {").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append("Object key = org.bhavaya.beans.BeanFactory.getKeyForBean(this);").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append("org.bhavaya.beans.BeanFactory collectionFactory = org.bhavaya.beans.BeanFactory.getInstance(org.bhavaya.util.ClassUtilities.getClass(\"").append(componentPropertyType).append("\"), org.bhavaya.beans.BeanFactory.getDatasource(this));").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append(setMethodName).append("((org.bhavaya.collection.BeanCollection) collectionFactory.get(key, \"").append(foreignIndex).append("\"));").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("} else if (org.bhavaya.beans.BeanFactory.isLazy(").append(propertyName).append(")) {").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append(setMethodName).append("((").append(propertyType.getName()).append(")((org.bhavaya.util.LoadClosure)").append(propertyName).append(").load());").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("}").append('\n');

            sourceCode.append(INDENT).append(INDENT).append("if (").append(propertyName).append(" == org.bhavaya.beans.LazyBeanCollection.NULL_COLLECTION) {").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append("return null;").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("}").append('\n');
        }

        sourceCode.append(INDENT).append(INDENT).append("return ").append(propertyName).append(';').append('\n');
        sourceCode.append(INDENT).append("}").append('\n').append('\n');
    }

    protected void appendArrayGetter(String propertyName, String propertyType, String componentPropertyType, String collectionPropertyName) {
        String getCollectionMethodName = getGetMethodName(propertyType, collectionPropertyName, true);
        sourceCode.append(INDENT).append("public ").append(propertyType).append(" get").append(Utilities.capitalise(propertyName)).append("() ").append("{").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("if (").append(getCollectionMethodName).append(" == null) return null;").append('\n');
        sourceCode.append(INDENT).append(INDENT).append("return (").append(propertyType).append(") ").append(getCollectionMethodName).append(".toArray(new ").append(componentPropertyType).append("[").append(getCollectionMethodName).append(".size()]);").append('\n');
        sourceCode.append(INDENT).append("}").append('\n').append('\n');
    }

    protected void appendSetter(String propertyName, String propertyType, String superClass, boolean lazy, boolean many, boolean hasSuperSetter) {
        String setMethodName = getSetMethodName(propertyName);

        sourceCode.append(INDENT).append("public void ").append(setMethodName).append("(").append(propertyType).append(' ').append(propertyName).append(") ").append("{").append('\n');

        if (lazy) {
            sourceCode.append(INDENT).append(INDENT).append("boolean newValueLazy = org.bhavaya.beans.BeanFactory.isLazy(").append(propertyName).append(");").append('\n');
        }

        sourceCode.append(INDENT).append(INDENT).append(propertyType).append(' ').append("oldValue = ").append("this.").append(propertyName).append(';').append('\n');

        if (lazy) {
            sourceCode.append(INDENT).append(INDENT).append("boolean oldValueLazy = org.bhavaya.beans.BeanFactory.isLazy(oldValue);").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("if (oldValue != null && !oldValueLazy && newValueLazy) {").append("\n");
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append(propertyName).append(" = (").append(propertyType).append(")((org.bhavaya.util.LoadClosure)").append(propertyName).append(").load();").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(INDENT).append("newValueLazy = false;").append('\n');
            sourceCode.append(INDENT).append(INDENT).append("}").append('\n');

            sourceCode.append(INDENT).append(INDENT).append(propertyType).append(" tempOldValue = org.bhavaya.beans.BeanFactory.isLazyNull(oldValue) ? null : oldValue;").append('\n');
            sourceCode.append(INDENT).append(INDENT).append(propertyType).append(" tempNewValue = org.bhavaya.beans.BeanFactory.isLazyNull(").append(propertyName).append(") ? null : ").append(propertyName).append(";").append('\n');
        }

        if (hasSuperSetter) {
            log.info("Adding call to super." + setMethodName + " as it already exists in: " + superClass);

            if (lazy) {
                sourceCode.append(INDENT).append(INDENT).append("if (oldValueLazy) this.").append(propertyName).append(" = ");
                if (many) {
                    sourceCode.append("org.bhavaya.beans.LazyBeanCollection.NULL_COLLECTION;").append('\n');
                } else {
                    sourceCode.append("null;").append('\n');
                }

                sourceCode.append(INDENT).append(INDENT).append("if (!newValueLazy) ").append("super.").append(setMethodName).append("(tempNewValue);").append('\n');
            } else {
                sourceCode.append(INDENT).append(INDENT).append("super.").append(setMethodName).append("(").append(propertyName).append(");").append('\n');
            }

        }

        sourceCode.append(INDENT).append(INDENT).append("this.").append(propertyName).append(" = ").append(propertyName).append(';').append('\n');

        if (lazy) {
            sourceCode.append(INDENT).append(INDENT).append("if (!oldValueLazy && !newValueLazy) ").append("firePropertyChange(\"").append(propertyName).append("\", tempOldValue, tempNewValue);").append('\n');
        } else {
            sourceCode.append(INDENT).append(INDENT).append("firePropertyChange(\"").append(propertyName).append("\", ").append("oldValue").append(", ").append(propertyName).append(");").append('\n');
        }


        sourceCode.append(INDENT).append('}').append('\n').append('\n');
    }

    public static String generatePropertySourceCode(String generatedType, String superType, boolean cardinalityOne, boolean lazy, boolean callSuperSetter, String propertyType, String propertyName, String indexName) {
        SourceCodeGenerator beanSourceCodeGenerator = new SourceCodeGenerator(".");

        beanSourceCodeGenerator.sourceCode = new StringBuffer(5000);
        beanSourceCodeGenerator.appendHeader(generatedType, superType, superType, new Class[]{});
        beanSourceCodeGenerator.appendConstructors(generatedType, superType);

        Property property = new ForeignKeyProperty(generatedType, propertyName, propertyType, cardinalityOne ? Property.ONE : Property.MANY, indexName, lazy);
        beanSourceCodeGenerator.appendProperty(superType, property, callSuperSetter);

        beanSourceCodeGenerator.sourceCode.append("}").append('\n');
        return beanSourceCodeGenerator.sourceCode.toString();
    }

    public static void main(String[] args) {
        if (args.length < 1) {
            log.error("Usage: SourceCodeGenerator <directory to generate beans in>");
            System.exit(1);
        }
        String directoryForGeneratedBeans = args[0];
        CodeGenerator beanSourceCodeGenerator = new SourceCodeGenerator(directoryForGeneratedBeans);
        beanSourceCodeGenerator.run();
    }
}
