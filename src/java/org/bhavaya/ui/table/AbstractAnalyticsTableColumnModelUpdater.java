package org.bhavaya.ui.table;

import org.bhavaya.ui.table.column.model.HidableTableColumn;

import javax.swing.table.TableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

/**
 * Created by IntelliJ IDEA.
 * User: Nick Ebbutt
 * Date: 20-Oct-2008
 * Time: 16:58:40
 *
 * Abstract superclass for classes which maintain the columns in the
 * AnalyticsTable fixed and scrollable column models
 */
public abstract class AbstractAnalyticsTableColumnModelUpdater {

    public abstract void updateColumns();

    public void repositionColumns(AnalyticsTableModel analyticsTableModel, TableColumnModel tableColumnModel) {
        if ( analyticsTableModel.isPivoted()) {
            repositionPivotCols(analyticsTableModel, tableColumnModel);
        }
    }

    //make sure non-pivot columns appear leftmost, followed by any 'locked' pivot columns, then unlocked autogenerated pivot cols in the order they appear in the table model, and finally special pivot cols
    private void repositionPivotCols(AnalyticsTableModel analyticsTableModel, TableColumnModel tableColumnModel) {

        List<TableColumn> specialPivotCols = getSpecialCols(tableColumnModel);
        moveColumnsToStart(tableColumnModel, specialPivotCols);

        List<TableColumn> notLockedPivotCols = findNotLockedPivotColumnsInTableModelOrder(analyticsTableModel, tableColumnModel);
        notLockedPivotCols.removeAll(specialPivotCols);
        moveColumnsToStart(tableColumnModel, notLockedPivotCols);

        List<TableColumn> lockedPivotCols = findLockedPivotColumns(analyticsTableModel, tableColumnModel);
        moveColumnsToStart(tableColumnModel, lockedPivotCols);

        List<TableColumn> nonPivotCols = findNonPivotColumns(analyticsTableModel, tableColumnModel);
        moveColumnsToStart(tableColumnModel, nonPivotCols);
    }

    private List<TableColumn> getSpecialCols(TableColumnModel tableColumnModel) {
        List<TableColumn> specialCols = new ArrayList<TableColumn>();
        addToListByIdentifier(tableColumnModel, specialCols, PivotTableModel.UNDEFINED_COLUMN_KEY);
        addToListByIdentifier(tableColumnModel, specialCols, PivotTableModel.DATA_NOT_READY_KEY);
        addToListByIdentifier(tableColumnModel, specialCols, PivotTableModel.TOTAL_COLUMN_KEY);
        return specialCols;
    }

    private void addToListByIdentifier(TableColumnModel tableColumnModel, List<TableColumn> specialCols, Object identifier) {
         try {
            int index = tableColumnModel.getColumnIndex(identifier);
            specialCols.add(tableColumnModel.getColumn(index));
        } catch (IllegalArgumentException iae) {
           //throws an exeception if the id is not there, returning -1 might have been a better plan
        }
    }

    private List<TableColumn> findLockedPivotColumns(AnalyticsTableModel analyticsTableModel, TableColumnModel tableColumnModel) {
        List<TableColumn> lockedPivotCols = new ArrayList<TableColumn>();
        TableColumn currentCol;
        Object identifier;
        for ( int col=0; col < tableColumnModel.getColumnCount(); col ++) {
            currentCol = tableColumnModel.getColumn(col);
            identifier = currentCol.getIdentifier();
            if ( analyticsTableModel.isPivotGeneratedColumn(identifier)) {
                PivotTableModel.GeneratedColumnKey colKey = (PivotTableModel.GeneratedColumnKey)identifier;
                if ( analyticsTableModel.getTablePivoter().isLockedPivotColumn(colKey)) {
                    lockedPivotCols.add(currentCol);
                }
            }
        }
        return lockedPivotCols;
    }

    private List<TableColumn> findNotLockedPivotColumnsInTableModelOrder(AnalyticsTableModel analyticsTableModel, TableColumnModel tableColumnModel) {
        List<TableColumn> notLockedColumns = findNotLockedColumns(analyticsTableModel, tableColumnModel);
        sortIntoOrderByTableModelIndex(notLockedColumns);
        return notLockedColumns;
    }

    private void sortIntoOrderByTableModelIndex(List<TableColumn> notLockedColumns) {
        Collections.sort(notLockedColumns, new Comparator<TableColumn>() {
            public int compare(TableColumn o1, TableColumn o2) {
                return (Integer.valueOf(o1.getModelIndex()).compareTo(o2.getModelIndex()));
            }
        });
    }

    private List<TableColumn> findNotLockedColumns(AnalyticsTableModel analyticsTableModel, TableColumnModel tableColumnModel) {
        List<TableColumn> notLockedColumns = new ArrayList<TableColumn>();
        TableColumn currentCol;
        Object identifier;
        for ( int col=0; col < tableColumnModel.getColumnCount(); col ++) {
            currentCol = tableColumnModel.getColumn(col);
            identifier = currentCol.getIdentifier();
            if ( analyticsTableModel.isPivotGeneratedColumn(identifier)) {
                PivotTableModel.GeneratedColumnKey colKey = (PivotTableModel.GeneratedColumnKey)identifier;
                if ( ! analyticsTableModel.getTablePivoter().isLockedPivotColumn(colKey)) {
                    notLockedColumns.add(currentCol);
                }
            }
        }
        return notLockedColumns;
    }

    private List<TableColumn> findNonPivotColumns(AnalyticsTableModel analyticsTableModel, TableColumnModel tableColumnModel) {
        List<TableColumn> nonPivotColumns = new ArrayList<TableColumn>();
        TableColumn currentCol;
        Object identifier;
        for ( int col=0; col < tableColumnModel.getColumnCount(); col ++) {
            currentCol = tableColumnModel.getColumn(col);
            identifier = currentCol.getIdentifier();
            if ( ! analyticsTableModel.isPivotGeneratedColumn(identifier)) {
               nonPivotColumns.add(currentCol);
            }
        }
        return nonPivotColumns;
    }

    private void moveColumnsToStart(TableColumnModel tableColumnModel, List<TableColumn> tableColumns) {
        int colsMoved = 0, currentIndex;
        for ( TableColumn col : tableColumns) {
            currentIndex = tableColumnModel.getColumnIndex(col.getIdentifier());
            tableColumnModel.moveColumn(currentIndex, colsMoved++);
        }
    }

    /**
     * Defer column configuration to another class which has the knowledge how to configure
     * and add a column
     */
    public static interface ColumnCreator {

         void configureColumnAndAddToModel(TableModel tableModel, TableColumnModel tableColumnModel, TableColumn column);

         TableColumn createTableColumn(int modelIndex);
    }

}
